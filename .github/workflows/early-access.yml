name: EarlyAccess

on:
  push:
    branches: [ main ]

jobs:
  # Build jlink distribution per runner
  build:
    name: 'Build with Java on ${{ matrix.os }}'
    if: github.repository == 'cbeams/bisq2' && startsWith(github.event.head_commit.message, 'Release v') != true
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
            java-version: 16
            distribution: 'zulu'

      - uses: actions/cache@v2
        with:
            path: ~/.gradle/caches
            key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
            restore-keys: |
                ${{ runner.os }}-gradle-

      - uses: actions/cache@v2
        with:
            path: ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradlew') }}
            restore-keys: |
                ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew build runtimeZip jpackage

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          if-no-files-found: ignore
          path: |
            app/**/build/jpackage/*.rpm
            app/**/build/jpackage/*.dmg
            app/**/build/jpackage/*.exe
            app/**/build/jpackage/*.msi
            app/**/build/jpackage/*.pkg
            app/**/build/jpackage/*.deb

  # Collect all distributions and release
  release:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Display structure of downloaded files'
        run: ls -R artifacts

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: 'zulu'

      - name: 'Release with JReleaser'
        uses: jreleaser/release-action@v1
        with:
          version: early-access
          # override {{artifactsDir}}
          arguments: full-release -p artifactsDir=artifacts
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.CI_SIGNING_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.CI_SIGNING_PUBKEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.CI_SIGNING_PRIVKEY }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
