plugins {
    id 'com.google.osdetector'
    id 'com.palantir.git-version'
    id 'org.openjfx.javafxplugin' apply false
    id 'org.beryx.runtime'        apply false
}

version = gitVersion()
ext.appVersion = '2.0.0'
if (version.matches("v\\d+\\.\\d+\\.\\d+.*")) {
    version = version.substring(1) // strip leading 'v'
    ext.appVersion = version.substring(0,5) // strip labels and return x.y.z
}

ext.platform = "${osdetector.os}-${osdetector.arch}"

configure(subprojects) {
    apply plugin: 'java-library'

    version = rootProject.version

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.slf4j:slf4j-api:1.7.31'
        implementation 'ch.qos.logback:logback-core:1.2.3'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation "com.google.truth:truth:1.1.3"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat = 'full'
            showStackTraces = false
        }
    }
}

configure(project(':api')) {
    // no additional configuration
}

configure(project(':client')) {
    dependencies {
        api project(':api')
        implementation 'com.squareup.okhttp3:okhttp:4.9.1'
        implementation 'com.google.code.gson:gson:2.8.7'
    }
}

configure(project(':core')) {
    dependencies {
        api project(':api')
        implementation 'com.sparkjava:spark-core:2.9.3'
        implementation 'com.google.code.gson:gson:2.8.7'
    }
}

configure(project(':app')) {
    dependencies {
        api 'info.picocli:picocli:4.6.1'
    }
}

configure(project(':app:daemon')) {
    apply plugin: 'application'
    apply plugin: 'org.beryx.runtime'

    dependencies {
        implementation project(':app')
        implementation project(':client')
        implementation project(':core')
    }

    application {
        mainClass = 'bisq.app.daemon.BisqDaemon'
        applicationName = 'bisqd'
    }

    processResources {
        expand(name: applicationName, version: version)
    }

    runtime {
        imageDir = file("$buildDir/images/bisqd-${platform}")
        imageZip = file("$buildDir/distributions/bisqd-${platform}.zip")
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        launcher {
            noConsole = true
        }
        jpackage {
            imageName = 'bisqd'
            installerName = 'bisqd'
            appVersion = rootProject.appVersion
        }
    }

    build.dependsOn installDist
}

configure(project(':app:cli')) {
    apply plugin: 'application'
    apply plugin: 'org.beryx.runtime'

    dependencies {
        implementation project(':app')
        implementation project(':client')
        implementation 'com.google.code.gson:gson:2.8.7'
        testImplementation project(':core')
    }

    application {
        mainClass = 'bisq.app.cli.BisqCLI'
        applicationName = 'bisq'
    }

    // see https://picocli.info/autocomplete.html
    task generateBashCompletion(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'picocli.AutoComplete'
        args 'bisq.app.cli.BisqCommand',
                '--force',
                "--completionScript=${project.rootDir}/bisq-completion.bash"
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }

    processResources {
        expand(name: "bisq cli", version: version)
    }

    runtime {
        imageDir = file("$buildDir/images/bisq-${platform}")
        imageZip = file("$buildDir/distributions/bisq-${platform}.zip")
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        launcher {
            noConsole = true
        }
        jpackage {
            imageName = 'bisq'
            installerName = 'bisq'
            appVersion = rootProject.appVersion
        }
    }

    build.dependsOn installDist, generateBashCompletion
}

configure(project(':app:fx')) {
    apply plugin: 'application'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'org.beryx.runtime'

    application {
        mainClass = 'bisq.app.fx.BisqFX'
        applicationName = 'bisqfx'
    }

    dependencies {
        implementation project(':app')
        implementation project(':client')
        implementation project(':core')
    }

    // see https://picocli.info/autocomplete.html
    task generateBashCompletion(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'picocli.AutoComplete'
        args 'bisq.app.fx.BisqFXCommand',
            '--force',
            "--completionScript=${project.rootDir}/bisqfx-completion.bash"
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }

    processResources {
        expand(name: applicationName, version: version)
    }

    javafx {
        // customize the application plugin's `run` task to use the correct JavaFX SDK and
        // modules; see the beryx runtime plugin's `launcher` closure below for equivalent
        // customization of generated start scripts.
        if (project.hasProperty(javafxSdkProperty))
            sdk = project.getProperty(javafxSdkProperty)
        else
            version = '16'
        modules = ['javafx.controls']
    }

    runtime {
        imageDir = file("$buildDir/images/bisqfx-${platform}")
        imageZip = file("$buildDir/distributions/bisqfx-${platform}.zip")
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        launcher {
            noConsole = true
            // start scripts created by the application plugin are overwritten by the
            // org.beryx.runtime plugin, thus custom settings must be configured here as
            // opposed to in the usual `startScripts` closure
            if (project.hasProperty(javafxSdkProperty)) {
                jvmArgs = [
                    '--add-modules=javafx.controls',
                    "--module-path=${project.getProperty(javafxSdkProperty)}/lib"
                ]
            }
        }

        jpackage {
            def imgType = osdetector.os == 'windows' ? 'ico' : osdetector.os == 'osx' ? 'icns' : 'png'
            imageName = 'bisqfx'
            installerName = 'bisqfx'
            appVersion = rootProject.appVersion
            imageOptions += ['--icon', "src/main/jpackage/icons/bisqfx.$imgType"]
            installerOptions += ['--resource-dir', "src/main/resources"]
            installerOptions += ['--vendor', 'Bisq']

            if (osdetector.os == 'windows') {
                installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            } else if (osdetector.os == 'linux') {
                installerOptions += ['--linux-package-name', 'bisqfx', '--linux-shortcut']
            } else if (osdetector.os == 'osx') {
                installerOptions += ['--mac-package-name', 'bisqfx']
                if (project.hasProperty(javafxSdkProperty))
                    jvmArgs += "--module-path=${project.getProperty(javafxSdkProperty)}/lib"
            }
        }
    }

    build.dependsOn installDist, generateBashCompletion
}
